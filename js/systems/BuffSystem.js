// –°–∏—Å—Ç–µ–º–∞ –±–∞—Ñ—Ñ–æ–≤ –¥–ª—è Future Survivors
class BuffSystem {
    constructor(scene) {
        this.scene = scene;
        this.activeBuffs = {};
        this.buffDefinitions = this.createBuffDefinitions();
        
        console.log('BuffSystem initialized with', Object.keys(this.buffDefinitions).length, 'buff types');
    }
    
    createBuffDefinitions() {
        return {
            // –ë–∞–∑–æ–≤—ã–µ –±–∞—Ñ—Ñ—ã
            health_boost: {
                name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
                description: '+20 –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é',
                icon: '‚ù§Ô∏è',
                effect: (player) => {
                    player.maxHealth = (player.maxHealth || 100) + 20;
                    player.health = Math.min(player.health + 20, player.maxHealth);
                    return `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${player.maxHealth}`;
                }
            },
            
            heal: {
                name: '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
                description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –∑–¥–æ—Ä–æ–≤—å—è',
                icon: 'üè•',
                effect: (player) => {
                    const oldHealth = player.health;
                    player.health = Math.min(player.health + 50, player.maxHealth || 100);
                    return `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${player.health - oldHealth} –∑–¥–æ—Ä–æ–≤—å—è`;
                }
            },
            
            damage_boost: {
                name: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞',
                description: '+25% –∫ —É—Ä–æ–Ω—É –æ—Ä—É–∂–∏—è',
                icon: '‚ö°',
                effect: (player) => {
                    player.damageMultiplier = (player.damageMultiplier || 1) * 1.25;
                    return `–£—Ä–æ–Ω: x${player.damageMultiplier.toFixed(2)}`;
                }
            },
            
            armor: {
                name: '–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç',
                description: '–£–º–µ–Ω—å—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —É—Ä–æ–Ω –Ω–∞ 15%',
                icon: 'üõ°Ô∏è',
                effect: (player) => {
                    player.armorReduction = (player.armorReduction || 0) + 0.15;
                    return `–ó–∞—â–∏—Ç–∞: ${Math.round(player.armorReduction * 100)}%`;
                }
            },
            
            speed_boost: {
                name: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ',
                description: '+30% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è',
                icon: 'üí®',
                effect: (player) => {
                    player.speedMultiplier = (player.speedMultiplier || 1) * 1.3;
                    return `–°–∫–æ—Ä–æ—Å—Ç—å: x${player.speedMultiplier.toFixed(2)}`;
                }
            },
            
            // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–∞—Ñ—Ñ—ã
            drone: {
                name: '–ë–æ–µ–≤–æ–π –¥—Ä–æ–Ω',
                description: '–î—Ä–æ–Ω –∞—Ç–∞–∫—É–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –≤—Ä–∞–≥–æ–≤',
                icon: 'ü§ñ',
                effect: (player) => {
                    player.hasDrone = true;
                    player.droneLevel = (player.droneLevel || 0) + 1;
                    return `–î—Ä–æ–Ω —É—Ä–æ–≤–µ–Ω—å ${player.droneLevel}`;
                }
            },
            
            fire_rate: {
                name: '–°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å',
                description: '+40% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ç—Ä–µ–ª—å–±—ã',
                icon: 'üî•',
                effect: (player) => {
                    player.fireRateMultiplier = (player.fireRateMultiplier || 1) * 1.4;
                    return `–°–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã: x${player.fireRateMultiplier.toFixed(2)}`;
                }
            },
            
            penetration: {
                name: '–ü—Ä–æ–±–∏–≤–∞–Ω–∏–µ',
                description: '–ü—É–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –≤—Ä–∞–≥–æ–≤',
                icon: 'üéØ',
                effect: (player) => {
                    player.bulletPenetration = (player.bulletPenetration || 0) + 1;
                    return `–ü—Ä–æ–±–∏–≤–∞–Ω–∏–µ: ${player.bulletPenetration} –≤—Ä–∞–≥–∞(–æ–≤)`;
                }
            },
            
            explosion: {
                name: '–í–∑—Ä—ã–≤–Ω—ã–µ –ø—É–ª–∏',
                description: '–ü—É–ª–∏ –≤–∑—Ä—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏',
                icon: 'üí•',
                effect: (player) => {
                    player.explosiveBullets = true;
                    player.explosionRadius = (player.explosionRadius || 50) + 25;
                    return `–†–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞: ${player.explosionRadius}px`;
                }
            },
            
            magnetic: {
                name: '–ú–∞–≥–Ω–µ—Ç–∏–∑–º',
                description: '–ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ–ø—ã—Ç',
                icon: 'üß≤',
                effect: (player) => {
                    player.magneticRange = (player.magneticRange || 0) + 100;
                    return `–†–∞–¥–∏—É—Å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è: ${player.magneticRange}px`;
                }
            },
            
            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞—Ñ—Ñ—ã
            regeneration: {
                name: '–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
                description: '+1 –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥',
                icon: 'üåø',
                effect: (player) => {
                    player.regenerationRate = (player.regenerationRate || 0) + 1;
                    return `–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ${player.regenerationRate} —Ö–ø/5—Å–µ–∫`;
                }
            },
            
            time_slow: {
                name: '–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
                description: '–í—Ä–∞–≥–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ 20% –º–µ–¥–ª–µ–Ω–Ω–µ–µ',
                icon: '‚è∞',
                effect: (player) => {
                    player.timeSlowEffect = (player.timeSlowEffect || 0) + 0.2;
                    return `–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤: ${Math.round(player.timeSlowEffect * 100)}%`;
                }
            },
            
            luck: {
                name: '–£–¥–∞—á–∞',
                description: '+15% —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ (x2)',
                icon: 'üçÄ',
                effect: (player) => {
                    player.criticalChance = (player.criticalChance || 0) + 0.15;
                    return `–®–∞–Ω—Å –∫—Ä–∏—Ç–∞: ${Math.round(player.criticalChance * 100)}%`;
                }
            },
            
            // –ù–æ–≤—ã–µ –±–æ–µ–≤—ã–µ –±–∞—Ñ—Ñ—ã
            drone: {
                name: '–ë–æ–µ–≤–æ–π –¥—Ä–æ–Ω',
                description: '–î—Ä–æ–Ω –∫—Ä—É–∂–∏—Ç –≤–æ–∫—Ä—É–≥ –∏ —Å—Ç—Ä–µ–ª—è–µ—Ç –ø–æ –≤—Ä–∞–≥–∞–º',
                icon: 'üöÅ',
                effect: (player) => {
                    player.hasDrone = true;
                    player.droneCount = (player.droneCount || 0) + 1;
                    return `–î—Ä–æ–Ω–æ–≤: ${player.droneCount}`;
                }
            },
            
            auto_targeting: {
                name: '–ê–≤—Ç–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ',
                description: '–í–∞—à–∏ —Å–Ω–∞—Ä—è–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â—É—Ç –≤—Ä–∞–≥–æ–≤',
                icon: 'üéØ',
                effect: (player) => {
                    player.autoTargeting = true;
                    return '–ê–≤—Ç–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ';
                }
            },
            
            rapid_fire: {
                name: '–°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å',
                description: '–ú–æ–∂–µ—Ç–µ —Å—Ç—Ä–µ–ª—è—Ç—å –≤ 2 —Ä–∞–∑–∞ —á–∞—â–µ',
                icon: '‚ö°',
                effect: (player) => {
                    player.fireRateMultiplier = (player.fireRateMultiplier || 1) * 0.5; // –ú–µ–Ω—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ
                    return `–°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å: x${(2 / player.fireRateMultiplier).toFixed(1)}`;
                }
            },
            
            piercing_shots: {
                name: '–ü—Ä–æ–±–∏–≤–Ω—ã–µ —Å–Ω–∞—Ä—è–¥—ã',
                description: '–°–Ω–∞—Ä—è–¥—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–∫–≤–æ–∑—å –≤—Ä–∞–≥–æ–≤',
                icon: 'üèπ',
                effect: (player) => {
                    player.piercing = (player.piercing || 0) + 2;
                    return `–ü—Ä–æ–±–∏–≤–∞–Ω–∏–µ: ${player.piercing} –≤—Ä–∞–≥–æ–≤`;
                }
            },
            
            multi_shot: {
                name: '–¢—Ä–æ–π–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª',
                description: '–°—Ç—Ä–µ–ª—è–µ—Ç–µ —Ç—Ä–µ–º—è —Å–Ω–∞—Ä—è–¥–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
                icon: 'üî±',
                effect: (player) => {
                    player.multiShot = (player.multiShot || 1) + 2;
                    return `–°–Ω–∞—Ä—è–¥–æ–≤ –∑–∞ –≤—ã—Å—Ç—Ä–µ–ª: ${player.multiShot}`;
                }
            },
            
            explosive_rounds: {
                name: '–†–∞–∑—Ä—ã–≤–Ω—ã–µ —Å–Ω–∞—Ä—è–¥—ã',
                description: '–°–Ω–∞—Ä—è–¥—ã –≤–∑—Ä—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏',
                icon: 'üí•',
                effect: (player) => {
                    player.explosiveShots = true;
                    player.explosionRadius = (player.explosionRadius || 0) + 50;
                    return `–†–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞: ${player.explosionRadius}px`;
                }
            },
            
            energy_shield: {
                name: '–≠–Ω–µ—Ä–≥–æ—â–∏—Ç',
                description: '–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ 3 –∞—Ç–∞–∫–∏',
                icon: 'üõ°Ô∏è',
                effect: (player) => {
                    player.shieldCharges = (player.shieldCharges || 0) + 3;
                    return `–ó–∞—Ä—è–¥–æ–≤ —â–∏—Ç–∞: ${player.shieldCharges}`;
                }
            },
            
            vampire: {
                name: '–í–∞–º–ø–∏—Ä–∏–∑–º',
                description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 2 HP –∑–∞ —É–±–∏–π—Å—Ç–≤–æ',
                icon: 'üßõ',
                effect: (player) => {
                    player.vampirism = (player.vampirism || 0) + 2;
                    return `–í–∞–º–ø–∏—Ä–∏–∑–º: +${player.vampirism} HP –∑–∞ —É–±–∏–π—Å—Ç–≤–æ`;
                }
            },
            
            berserker: {
                name: '–ë–µ—Ä—Å–µ—Ä–∫',
                description: '–ß–µ–º –º–µ–Ω—å—à–µ HP, —Ç–µ–º –±–æ–ª—å—à–µ —É—Ä–æ–Ω',
                icon: 'üò°',
                effect: (player) => {
                    player.berserkerMode = true;
                    return '–†–µ–∂–∏–º –±–µ—Ä—Å–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
                }
            }
        };
    }
    
    getRandomBuffs(count = 3) {
        const allBuffs = Object.keys(this.buffDefinitions);
        const selectedBuffs = [];
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±–∞—Ñ—Ñ—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        while (selectedBuffs.length < count && selectedBuffs.length < allBuffs.length) {
            const randomBuff = allBuffs[Math.floor(Math.random() * allBuffs.length)];
            if (!selectedBuffs.includes(randomBuff)) {
                selectedBuffs.push(randomBuff);
            }
        }
        
        return selectedBuffs.map(buffId => ({
            id: buffId,
            ...this.buffDefinitions[buffId]
        }));
    }
    
    applyBuff(buffId, target) {
        const buff = this.buffDefinitions[buffId];
        if (!buff) {
            console.error('Unknown buff:', buffId);
            return;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –±–∞—Ñ—Ñ–∞
        const result = buff.effect(target);
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π –±–∞—Ñ—Ñ
        if (!this.activeBuffs[buffId]) {
            this.activeBuffs[buffId] = 0;
        }
        this.activeBuffs[buffId]++;
        
        console.log(`Applied buff: ${buff.name} - ${result}`);
        
        return {
            name: buff.name,
            description: result
        };
    }
    
    getActiveBuffs() {
        return this.activeBuffs;
    }
    
    getBuffInfo(buffId) {
        return this.buffDefinitions[buffId];
    }
}

// Export –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BuffSystem;
}
