                } catch (e1) {
                    console.log('Method 1 failed:', e1.message);
                    
                    // Способ 2: Прямое создание с полным путем
                    try {
                        console.log('Method 2: Direct path creation...');
                        this.playerVideo = this.add.video(videoX + videoWidth/2, videoY + videoHeight/2, 'image/player.webm');
                        console.log('Method 2: SUCCESS with direct path');
                    } catch (e2) {
                        console.log('Method 2 failed:', e2.message);
                        
                        // Способ 3: Создание через load и play
                        try {
                            console.log('Method 3: Dynamic load...');
                            this.playerVideo = this.add.video(videoX + videoWidth/2, videoY + videoHeight/2);
                            this.playerVideo.loadURL('image/player.webm');
                            console.log('Method 3: SUCCESS with dynamic load');
                        } catch (e3) {
                            console.log('Method 3 failed:', e3.message);
                            throw new Error('All video creation methods failed');
                        }
                    }
                }
                
                // Проверяем что видео создалось корректно
                if (!this.playerVideo) {
                    throw new Error('Player video not created');
                }
                
                this.playerVideo.setOrigin(0.5);
                this.playerVideo.setDisplaySize(videoWidth, videoHeight);
                this.playerVideo.setDepth(1000);
                this.playerVideo.setScrollFactor(0);
                
                // Настраиваем зацикливание и воспроизведение
                this.playerVideo.setLoop(true);
                
                // НЕМЕДЛЕННЫЙ запуск видео
                console.log('Attempting immediate video start...');
                try {
                    this.playerVideo.play().then(() => {
                        console.log('Player video started immediately!');
                    }).catch(e => {
                        console.warn('Immediate play failed:', e);
                    });
                } catch (e) {
                    console.warn('Immediate play error:', e);
                }
                
                // Множественные попытки запуска (безопасная версия)
                this.time.delayedCall(100, () => {
                    if (this.playerVideo && this.playerVideo.play) {
                        console.log('Force starting player video (attempt 1)...');
                        try {
                            this.playerVideo.play();
                            console.log('Video play attempt 1 success');
                        } catch (e) {
                            console.warn('Video play attempt 1 error:', e);
                        }
                    }
                });
                
                this.time.delayedCall(500, () => {
                    if (this.playerVideo && this.playerVideo.play) {
                        console.log('Force starting player video (attempt 2)...');
                        try {
                            this.playerVideo.play();
                            console.log('Video play attempt 2 success');
                        } catch (e) {
                            console.warn('Video play attempt 2 error:', e);
                        }
                    }
                });
                
                this.time.delayedCall(1000, () => {
                    if (this.playerVideo && this.playerVideo.play) {
                        console.log('Force starting player video (attempt 3)...');
                        try {
                            this.playerVideo.play();
                            console.log('Video play attempt 3 success');
                        } catch (e) {
                            console.warn('Video play attempt 3 error:', e);
                        }
                    }
                });
                
                // Обработчик для автоматического перезапуска если видео остановилось
                this.playerVideo.on('complete', () => {
                    console.log('Player video completed, restarting...');
                    this.time.delayedCall(50, () => {
                        this.playerVideo.play();
                    });
                });
                
                // Дополнительная проверка каждые 5 секунд
                this.playerVideoTimer = this.time.addEvent({
                    delay: 5000,
                    callback: () => {
                        if (this.playerVideo && !this.playerVideo.isPlaying()) {
                            console.log('Player video not playing, restarting...');
                            this.playerVideo.play();
                        }
                    },
                    loop: true
                });
                
                // Делаем видео интерактивным для принудительного запуска
                this.playerVideo.setInteractive();
                this.playerVideo.on('pointerdown', () => {
                    console.log('Player video clicked, forcing play...');
                    try {
                        this.playerVideo.play();
                    } catch (e) {
                        console.warn('Click play failed:', e);
                    }
                });
                
                // Принудительно показываем видео
                this.playerVideo.setVisible(true);
                this.playerVideo.setActive(true);
                this.playerVideo.setAlpha(1);
                
                console.log('=== PLAYER VIDEO FINAL CHECK ===');
                if (this.playerVideo) {
                    console.log('Video position:', this.playerVideo.x, this.playerVideo.y);
                    console.log('Video size:', this.playerVideo.width || 'null', this.playerVideo.height || 'null');
                    console.log('Video displayWidth/Height:', this.playerVideo.displayWidth || 'null', this.playerVideo.displayHeight || 'null');
                    console.log('Video visible:', this.playerVideo.visible);
                    console.log('Video alpha:', this.playerVideo.alpha);
                    console.log('Video depth:', this.playerVideo.depth);
                    console.log('Video texture key:', this.playerVideo.texture?.key);
                } else {
                    console.log('PlayerVideo is null!');
                }
                
                console.log('Player video created successfully with click handler');
            } catch (error) {
                console.error('Failed to create player video:', error);
                // НЕ создаем fallback - пусть видео отображается
                console.log('Video should still be created, ignoring fallback');
            }
        } else {
            console.warn('Player video not found in cache - FORCING VIDEO CREATION');
            
            // ПРИНУДИТЕЛЬНО пытаемся создать видео даже без кэша
            const videoWidth = 200;
            const videoHeight = 150;
            const videoX = 20;
            const videoY = this.cameras.main.height - videoHeight - 20;
            
            try {
                console.log('FORCING video creation without cache...');
                this.playerVideo = this.add.video(videoX + videoWidth/2, videoY + videoHeight/2);
                this.playerVideo.loadURL('image/player.webm');
                this.playerVideo.setOrigin(0.5);
                this.playerVideo.setDisplaySize(videoWidth, videoHeight);
                this.playerVideo.setDepth(1000);
                this.playerVideo.setScrollFactor(0);
                this.playerVideo.setLoop(true);
                
                // Принудительно показываем
                this.playerVideo.setVisible(true);
                this.playerVideo.setActive(true);
                this.playerVideo.setAlpha(1);
                
                // Интерактивность для клика
                this.playerVideo.setInteractive();
                this.playerVideo.on('pointerdown', () => {
                    console.log('Forced video clicked, forcing play...');
                    try {
                        this.playerVideo.play();
                    } catch (e) {
                        console.warn('Forced click play failed:', e);
                    }
                });
                
                try {
                    this.playerVideo.play();
                } catch (e) {
                    console.warn('Force play failed:', e);
                }
                
                console.log('=== FORCED VIDEO FINAL CHECK ===');
                if (this.playerVideo) {
                    console.log('Forced video position:', this.playerVideo.x, this.playerVideo.y);
                    console.log('Forced video size:', this.playerVideo.displayWidth || 'null', this.playerVideo.displayHeight || 'null');
                    console.log('Forced video visible:', this.playerVideo.visible);
                } else {
                    console.log('Forced playerVideo is null!');
                }
                
                console.log('FORCED video creation successful!');
            } catch (error) {
                console.error('FORCED video creation failed:', error);
            }
        }
        
                    // ПРОСТОЕ РАБОЧЕЕ ВИДЕО ПЕРСОНАЖА - без сложностей
            console.log('=== CREATING SIMPLE PLAYER VIDEO ===');
            try {
                // Позиция в левом нижнем углу (0, высота экрана)
                const videoX = 0;  // Левый край экрана
                const videoY = this.cameras.main.height; // Нижний край экрана

                // БЕЗОПАСНОЕ создание видео с проверками
                try {
                    this.playerVideoSimple = this.add.video(videoX, videoY, 'player_video');
                    
                    // Ждем загрузки видео перед настройкой
                    if (this.playerVideoSimple) {
                        // Базовые настройки сразу
                        this.playerVideoSimple.setOrigin(0, 1); // левый нижний угол
                        this.playerVideoSimple.setDepth(2000);
                        this.playerVideoSimple.setScrollFactor(0);
                        
                        // Настройки размера и видимости через небольшую задержку
                        this.time.delayedCall(50, () => {
                            if (this.playerVideoSimple) {
                                this.playerVideoSimple.setScale(0.5); // Уменьшаем еще в 1.5 раза
                                this.playerVideoSimple.setVisible(true);
                                this.playerVideoSimple.setLoop(true);
                                this.playerVideoSimple.setInteractive();
                            }
                        });
                        
                        // Автозапуск через задержку
                        this.time.delayedCall(100, () => {
                            if (this.playerVideoSimple) {
                                try {
                                    this.playerVideoSimple.play();
                                    console.log('Simple video play started');
                                } catch (e) {
                                    console.warn('Simple video play failed:', e);
                                }
                            }
                        });
                        
                        console.log(`Simple player video created at: ${videoX}, ${videoY} (left-bottom corner) with scale 0.5`);
                    } else {
                        console.warn('PlayerVideoSimple creation returned null');
                    }
                } catch (videoCreateError) {
                    console.error('Video creation error:', videoCreateError);
                    console.log('Video creation failed - this may be normal if WebM not supported');
                }
            } catch (error) {
                console.error('Simple player video creation failed:', error);
            }